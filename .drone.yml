---
kind: pipeline
name: orchestrator-tests

steps:
#  - name: build-circleci
#    image: curlimages/curl
#    commands:
#      - curl -X POST --data "branch=master" https://circleci.com/api/v1.1/project/github/OpenCTI-Platform/opencti/build?circle-token=$CIRCLECI_TOKEN
#    environment:
#      CIRCLECI_TOKEN:
#        from_secret: circleci_token
#    when:
#      branch:
#        - master
#      event:
#        exclude:
#          - pull_request
#          - tag
#
#  - name: build-circleci-release
#    image: curlimages/curl
#    commands:
#      - curl -X POST --data "tag=$DRONE_TAG" https://circleci.com/api/v1.1/project/github/OpenCTI-Platform/opencti/build?circle-token=$CIRCLECI_TOKEN
#    environment:
#      CIRCLECI_TOKEN:
#        from_secret: circleci_token
#    when:
#      event:
#        - tag
#
#  - name: slack
#    image: plugins/slack
#    settings:
#      webhook:
#        from_secret: slack_webhook
#      username: drone
#      icon_url: https://avatars.githubusercontent.com/oa/1284929
#      channel: notifications
#    when:
#      status: [success, failure]
#      event:
#        exclude:
#          - pull_request

services:
  - name: redis
    image: redis:7.0.0
  - name: elastic
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms2g -Xmx2g
  - name: minio
    image: minio/minio:RELEASE.2022-05-19T18-20-59Z
    environment:
      MINIO_ROOT_USER: ChangeMe
      MINIO_ROOT_PASSWORD: ChangeMe
    command: [server, /data]
  - name: rabbitmq
    image: rabbitmq:3.10-management
  - name: orchestrator-start
    image: cimg/python:3.10
    environment:
      OPENCTI_URL: 4100
      ELASTICSEARCH_URL: http://elastic:9200
#      ELASTICSEARCH__INDEX_PREFIX: raw-start
      BROKER: "STDOUT"
      REDIS__HOSTNAME: redis
      #      REDIS__NAMESPACE: raw-start
    commands:
      - sleep 30
      - apk add build-base git libffi-dev
      - cp -a ./* /tmp/raw-orchestrator
      - cd /tmp/raw-orchestrator
      - pip3 install -r requirements.txt --user
      - flask recreate_db
      - flask run